import Head from "next/head"
import Link from "next/link"
import Image from "next/image"

import { Header } from "components/Header"
import { Footer } from "components/Footer"

import fs from "node:fs/promises"
import { Layout } from "components/Layout"

export default function Home({ latestComics }) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Layout>
        <h2 className="text-3xl font-bold text-center mb-10">Latest Comics</h2>
        <section className="grid grid-cols-1 gap-2 max-w-lg m-auto sm:grid-cols-2 md:grid-cols-3">
          {latestComics.map((comic) => (
            <Link href={`/comic/${comic.id}`} key={comic.id}>
              <a className="mb-4 pb-4 m-auto">
                <h3 className="font-bold text-sm text-center pb-2">
                  {comic.title}
                </h3>
                {/* No utilizamos <Image /> porque no conocemos width ni height
                de las im√°genes y el componente lo pide. */}
                <Image
                  width={300}
                  height={300}
                  // width={comic.width}
                  // height={comic.height}
                  layout="intrinsic"
                  objectFit="contain"
                  src={comic.img}
                  alt={comic.alt}
                />
                {/* <Image layout="fill" src={comic.img} alt={comic.alt} /> */}
              </a>
            </Link>
          ))}
        </section>
      </Layout>
    </>
  )
}

export async function getStaticProps() {
  const files = await fs.readdir("./comics")
  const latestComicsFiles = files.slice(-8, files.length)

  // Arreglo de promesas con el contenido de cada archivo.
  const promisesReadFiles = latestComicsFiles.map(async (fileName) => {
    const content = await fs.readFile(`./comics/${fileName}`, "utf-8")

    // No necesitamos hacer un objeto con el spred porque solo regresaremos ese
    // objeto sin otras propiedades.
    /* return { ...JSON.parse(content) } */

    return JSON.parse(content)
  })

  // Resolvemos las promesas que se crearon cuando se leyeron los archivos.
  const latestComics = await Promise.all(promisesReadFiles)

  return {
    props: {
      latestComics,
    },
  }
}
